const {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  Events,
  REST,
  Routes,
  Collection
} = require('discord.js');
const fs = require('fs');
const path = require('path');

require('dotenv').config();
const { checkTwitchLive } = require('./utils/twitchChecker');

// === Configuration ===
const WELCOME_CHANNEL_ID = '1364697720874602668';
const RULES_CHANNEL_ID = '1364866891381997650';
const ROLE_ID = '1364718859822829641';
const TWITCH_ROLE_ID = '1364945730372112496';
const ROLE_SELECTOR_CHANNEL = '1364946367939612683';

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers],
  partials: [Partials.GuildMember],
});

// === Enregistrement des commandes slash ===
client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
const commands = [];

for (const file of commandFiles) {
  const command = require(path.join(commandsPath, file));
  commands.push(command.data.toJSON());
  client.commands.set(command.data.name, command);
}
const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

client.once('ready', async () => {
  console.log(`ü§ñ Connect√© en tant que ${client.user.tag}`);

  try {
    await rest.put(Routes.applicationCommands(client.user.id), { body: commands });
    console.log('‚úÖ Commandes slash enregistr√©es');
  } catch (err) {
    console.error('‚ùå Erreur enregistrement commandes :', err);
  }

  // === Message de r√®glement
  const rulesChannel = client.channels.cache.get(RULES_CHANNEL_ID);
  if (rulesChannel) {
    const messages = await rulesChannel.messages.fetch({ limit: 10 });
    const alreadyPosted = messages.some(msg => msg.author.id === client.user.id && msg.embeds.length);
    if (!alreadyPosted) {
      const embed = new EmbedBuilder()
        .setTitle('üìú R√àGLEMENT DU SERVEUR VNS')
        .setDescription(
          `Bienvenue √† toi chez **VNS** ‚Äî la communaut√© qui ne tue pas les squads adverses mais les ridiculise !\n\n` +
          `Merci de prendre quelques minutes pour lire ce r√®glement, on tient √† une bonne ambiance üòå\n\n` +
          `üîπ **1. Respect avant tout**\n` +
          `‚Üí On est ici pour chill. Aucune place pour les insultes, propos haineux ou discriminations.\n\n` +
        
          `üîπ **2. Pas de spam, pub ou contenu NSFW**\n` +
          `‚Üí On rigole, mais dans les limites du bon go√ªt.\n\n` +
        
          `üîπ **3. Utilise les bons canaux**\n` +
          `‚Üí Chaque salon a sa fonction, respecte-les pour qu‚Äôon s‚Äôy retrouve.\n\n` +
        
          `üîπ **4. Pas de pseudo troll ou illisible**\n` +
          `‚Üí On doit pouvoir te tagger facilement üß†\n\n` +
        
          `üîπ **5. Le staff est l√† pour vous, mais restez cool**\n` +
          `‚Üí On est b√©n√©voles. Une remarque ? On en discute sans clash.\n\n` +
        
          `‚úÖ Clique sur le bouton ci-dessous pour **valider** et acc√©der au serveur.`
        )
        
        .setColor(0x00AEEF)
        .setFooter({ text: 'L‚Äô√©quipe VNS vous souhaite la bienvenue üíú' });

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('accept_rules').setLabel('‚úÖ Je valide').setStyle(ButtonStyle.Success)
      );

      await rulesChannel.send({ embeds: [embed], components: [row] });
      console.log("üìú R√®glement VNS envoy√© avec bouton.");
    }
    setInterval(() => {
      checkTwitchLive(client, '1364946098191470633', '1364945730372112496');
    }, 5 * 60 * 1000); // toutes les 5 minutes
    
  }

  // === Message pour r√¥le Twitch
  const twitchRoleChannel = client.channels.cache.get(ROLE_SELECTOR_CHANNEL);
  if (twitchRoleChannel) {
    const embed = new EmbedBuilder()
      .setTitle('üé≠ Choisis ton r√¥le Twitch')
      .setDescription(
        `üéÆ Tu veux recevoir les notifications des lives Twitch ?\n\n` +
        `Clique ici pour recevoir le r√¥le <@&${TWITCH_ROLE_ID}>.\n` +
        `Tu pourras le retirer √† tout moment.`
      )
      .setColor(0x9146FF)
      .setThumbnail('https://static-cdn.jtvnw.net/jtv_user_pictures/hosted_images/Twitch_Logo_Purple_RGB.png')
      .setFooter({ text: 'S√©lection automatique de r√¥le - VNS' });

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('toggle_twitch_role')
        .setLabel('üéÆ Je suis Streamer Twitch')
        .setStyle(ButtonStyle.Primary)
    );

    await twitchRoleChannel.send({ embeds: [embed], components: [row] });
    console.log('üì© Message de r√¥le Twitch envoy√©');
  }
});

// === Gestion des membres
client.on('guildMemberAdd', async member => {
  const channel = member.guild.channels.cache.get(WELCOME_CHANNEL_ID);
  if (!channel) return;

  const embed = new EmbedBuilder()
    .setTitle('üéâ Bienvenue chez VNS !')
    .setDescription(`Salut ${member}, va lire <#${RULES_CHANNEL_ID}> pour d√©bloquer l‚Äôacc√®s.`)
    .setColor(0x00FF00)
    .setThumbnail(member.user.displayAvatarURL())
    .setFooter({ text: `Nous sommes maintenant ${member.guild.memberCount} membres.` });

  channel.send({ embeds: [embed] });
});

client.on('guildMemberRemove', member => {
  const channel = member.guild.channels.cache.get(WELCOME_CHANNEL_ID);
  if (!channel) return;

  const embed = new EmbedBuilder()
    .setTitle('üò¢ D√©part...')
    .setDescription(`${member.user.tag} a quitt√© le serveur.`)
    .setColor(0xFF0000)
    .setThumbnail(member.user.displayAvatarURL())
    .setFooter({ text: `Il reste ${member.guild.memberCount} membres.` });

  channel.send({ embeds: [embed] });
});

// === Gestion des boutons et slash
client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton()) {
    const member = interaction.member;

    if (interaction.customId === 'accept_rules') {
      const role = member.guild.roles.cache.get(ROLE_ID);
      if (!role) return interaction.reply({ content: "‚ùå R√¥le introuvable.", ephemeral: true });
      try {
        await member.roles.add(role);
        await interaction.reply({ content: "‚úÖ R√®glement accept√© ! Bienvenue üéâ", ephemeral: true });
      } catch (err) {
        console.error(err);
        await interaction.reply({ content: "‚ùå Erreur attribution r√¥le.", ephemeral: true });
      }
    }

    if (interaction.customId === 'toggle_twitch_role') {
      const role = member.guild.roles.cache.get(TWITCH_ROLE_ID);
      if (!role) return interaction.reply({ content: "‚ùå R√¥le Twitch introuvable.", ephemeral: true });

      const hasRole = member.roles.cache.has(role.id);
      try {
        if (hasRole) {
          await member.roles.remove(role);
          await interaction.reply({ content: "‚ùå R√¥le Twitch retir√©.", ephemeral: true });
        } else {
          await member.roles.add(role);
          await interaction.reply({ content: "‚úÖ R√¥le Twitch ajout√© !", ephemeral: true });
        }
      } catch (err) {
        console.error(err);
        await interaction.reply({ content: "‚ùå Erreur Twitch r√¥le.", ephemeral: true });
      }
    }
  }

  // Commandes Slash
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;
    try {
      await command.execute(interaction);
    } catch (err) {
      console.error(err);
      await interaction.reply({ content: '‚ùå Erreur dans la commande.', ephemeral: true });
    }
  }
});

client.login(process.env.TOKEN);
